esphome:
  name: airgradient-XXXXXX
  platform: ESP8266
  board: d1_mini
  includes: pm25_to_aqi_us.h

# Enable logging
logger:

# Enable Home Assistant API
api:

# remote restart button
button:
  - platform: restart
    name: "airgradient-XXXXXX restart"

ota:
  password: !secret ota_password

# Create a switch for safe_mode in order to flash the device
# Solution from this thread:
# https://community.home-assistant.io/t/esphome-flashing-over-wifi-does-not-work/357352/1
switch:
  - platform: safe_mode
    name: "Flash Mode (Safe Mode)"

wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
  reboot_timeout: 15min

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "AirGradient XXXXXX Fallback"
    password: !secret fallback_ssid_password

captive_portal:

i2c:
  sda: D2
  scl: D1

font:
  - file: "fonts/MonospaceTypewriter.ttf"
    id: MonospaceTypewriter
    size: 14
    glyphs: |
      !"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyzµ³/

display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    address: 0x3c
    external_vcc: true
    lambda: |-
      // First need to convert the pm25 to US AQI value. Function was taken from the original DIY PRO firmware from Arduino sketch. 
      double aqi_us = 0.0;
      aqi_us = pm25_to_aqi_us(id(pm25).state); 
      
      // This is to duplicate the look of the original firmware. 
      it.printf(0, 0, id(MonospaceTypewriter), "PM:%.0f CO2:%.0f", id(pm25).state, id(co2).state);
      it.printf(0, 22, id(MonospaceTypewriter), "AQI:%.0f TVOC:%.0f", aqi_us, id(voc).state);
      
      // If you want temp in Fahrenheit
      it.printf(0, 44, id(MonospaceTypewriter), "F:%.2f H:%.0f%%", ((id(temp).state * 1.8) + 32), id(humidity).state);
      
      // If you want the temp in Celsius, uncomment this and comment the above
      //it.printf(0, 44, id(MonospaceTypewriter), "C:%.2f H:%.0f%%", id(temp).state, id(humidity).state);

uart:
  - rx_pin: D5
    tx_pin: D6
    baud_rate: 9600
    id: uart_1
    
  - rx_pin: D4
    tx_pin: D3
    baud_rate: 9600
    id: uart_2

sensor:
  - platform: sht3xd
    temperature:
      id: temp
      name: "airgradient-XXXXXX Temperature"
    humidity:
      id: humidity
      name: "airgradient-XXXXXX Humidity"
    address: 0x44
    update_interval: 30s

  - platform: pmsx003
    # type can be PMSX003, PMS5003S, PMS5003T, PMS5003ST
    # https://esphome.io/components/sensor/pmsx003.html
    type: PMSX003
    uart_id: uart_1
#    pm_1_0:
#      id: pm10
#      name: "Particulate Matter <1.0µm Concentration"
    pm_2_5:
      id: pm25
      name: "airgradient-XXXXXX Particulate Matter <2.5µm Concentration"
#    pm_10_0:
#      id: pm100
#      name: "Particulate Matter <10.0µm Concentration"
#    formaldehyde:
#      id: hcho
#      name: "Formaldehyde (HCHO) concentration in µg per cubic meter"
    update_interval: 30s

  - platform: senseair
    uart_id: uart_2
    co2:
      id: co2
      name: "airgradient-XXXXXX SenseAir CO2 Value"
    update_interval: 60s

  - platform: sgp4x
  # https://esphome.io/components/sensor/sgp4x.html
    voc:
      id: voc
      name: "airgradient-XXXXXX TVOC Index"   
    nox:
      id: nox
      name: "airgradient-XXXXXX NOx Index"
    compensation:
      humidity_source: humidity
      temperature_source: temp
    update_interval: 60s
